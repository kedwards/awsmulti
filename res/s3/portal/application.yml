---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Application Stack, A simple web page"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Application Environment Configuration"
        Parameters:
          - Environment
          - AppVersion
          - MinSize
          - MaxSize
          - DesiredCapacity
          - RemoteAccessCIDR
          - OperatorEMail
          - KeyName
    ParameterLabels:
      Environment:
        default: "Enviornment Name"
      AppVersion:
        default: "Application Version"
      MinSize:
        default: "Minimum Running Application Servers"
      MaxSize:
        default: "Maximum Running Application Servers"
      DesiredCapacity:
        default: "Normal Running Application Servers"
      RemoteAcessCIDR:
        default: "CIDR address for remote connections"
      OperatorEMail:
        default: "Operator Email for Notifications"
      KeyName:
        default: "SSH key to use to connect to instances"
Parameters:
  AppVersion:
    Type: String
    Description: Application Version to Deploy
    Default: "1"
  Environment:
    Type: String
    Description: Type of environment to provision
    Default: DEV
    AllowedValues:
      - DEV
      - TEST
      - QA
      - PROD
  MinSize:
    Type: String
    Description: Minimum number of app servers
    Default: "2"
  MaxSize:
    Type: String
    Description: Maximum number of app servers (Desired x 2)
    Default: "4"
  DesiredCapacity:
    Type: String
    Description: Nominal Size of APP Env
    Default: "2"
  RemoteAccessCIDR:
    Description: Source that has SSH access to the bastion host. (i.e. 50.32.108.38/32)
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: "70.75.56.37/32"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  OperatorEMail:
    Description: EMail address to notify if there are any scaling operations
    Type: String
    Default: "kedwards@kevinedwards.ca"
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: "onica"
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
Mappings:
  RegionMap: # amzn2-ami-hvm-2.0.20190313-x86_64-gp2 
    us-east-1:
      "AMALINUX" : "ami-0de53d8956e8dcf80"
    us-east-2:
      "AMALINUX" : "ami-02bcbb802e03574ba"
    us-west-1:
      "AMALINUX" : "ami-0019ef04ac50be30f"
    us-west-2:
      "AMALINUX" : "ami-061392db613a6357b"
    ca-central-1:
      "AMALINUX" : "ami-03338e1f67dae0168"
  InstanceSize:
    DEV:
      "EC2" : "t2.micro"
    TEST:
      "EC2" : "t2.micro"
    QA:
      "EC2" : "t2.micro"
    PROD:
      "EC2" : "t2.small"
Resources:
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref OperatorEMail
          Protocol: email
  AutoScalingGroupApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: "PT5M"
        Count: !Ref DesiredCapacity
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
    Properties:
      Cooldown: "300"
      DesiredCapacity: !Ref DesiredCapacity
      HealthCheckGracePeriod: "300"
      HealthCheckType: "ELB"
      VPCZoneIdentifier:
        - !Ref SubnetPrivateA
        - !Ref SubnetPrivateB
      LaunchConfigurationName: !Ref LaunchConfigurationApp
      TargetGroupARNs:
        - !Ref TargetGroupApp
      MaxSize: !Ref MaxSize
      MinSize: !Ref MinSize
      NotificationConfigurations:
        - TopicARN: !Ref NotificationTopic
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
  LaunchConfigurationApp:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX]
      InstanceType: !FindInMap [InstanceSize, !Ref Environment, EC2]
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref SecurityGroupInstanceApp
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y aws-cfn-bootstrap
            amazon-linux-extras install -y epel
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfigurationApp --configsets www --region ${AWS::Region}
            yum -y update
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroupApp --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          www:
            - "configure_cfn"
            - "install_www"
            - "config_app"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfigurationApp.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfigurationApp --configsets www --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        install_www:
          packages:
            yum:
              httpd: []
              php: []
              stress: []
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
        config_app:
          sources:
            /var/www/html: !Join ["", [!ImportValue infra-appbucketurl, "/app", !Ref AppVersion, ".zip"]]
          files:
            /var/www/html/test.pattern.zip:
              source: !Join ["", [!ImportValue infra-appbucketurl, "/test", !Ref AppVersion, ".zip"]]
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            unzippattern:
              cwd: "/var/www/html"
              command: "unzip -o test.pattern.zip"
  LoadBalancerApp:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: "ipv4"
      Scheme: "internet-facing"
      Subnets:
        - !Ref SubnetPublicA
        - !Ref SubnetPublicB
      SecurityGroups:
        - !Ref SecurityGroupLoadBalancerApp
      Tags: 
      - Key: Name 
        Value: !Join ["-", [!Ref "AWS::StackName", "alb" ]]
  TargetGroupApp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /health.html
      HealthCheckTimeoutSeconds: 15
      Name: !Join ["-", [!Ref "AWS::StackName", "targetgrpapp" ]]
      Port: 80
      Protocol: "HTTP"
      VpcId: !ImportValue infra-vpcid
      TargetType: "instance"
  ListenerApp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupApp
          Type: "forward"
      LoadBalancerArn: !Ref LoadBalancerApp
      Port: 80
      Protocol: "HTTP"
  SecurityGroupLoadBalancerApp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ["", [!Ref "AWS::StackName", " Application V", !Ref AppVersion, " - ", !Ref Environment ]]
      VpcId: !ImportValue infra-vpcid
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: "80"
          FromPort: "80"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: "80"
          FromPort: "80"
  SecurityGroupInstanceApp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ["-", [!Ref "AWS::StackName", "app-sg" ]]
      VpcId: !ImportValue infra-vpcid
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref SecurityGroupLoadBalancerApp
          IpProtocol: tcp
          ToPort: "80"
          FromPort: "80"
        - SourceSecurityGroupId: !Ref SecurityGroupInstanceBastion
          IpProtocol: tcp
          ToPort: "22"
          FromPort: "22"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol : "-1"
  SecurityGroupInstanceBastion:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ["-", [!Ref "AWS::StackName", "bastion-sg" ]]
      VpcId: !ImportValue infra-vpcid
      SecurityGroupIngress:
        - CidrIp: !Ref RemoteAccessCIDR
          IpProtocol: tcp
          ToPort: "22"
          FromPort: "22"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: "22"
          FromPort: "22"
  ScalingPolicyAppUp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroupApp
      Cooldown: "1"
      ScalingAdjustment: "1"
  ScalingPolicyAppDown:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroupApp
      Cooldown: "1"
      ScalingAdjustment: "-1"
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 75% for 2 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: "60"
      EvaluationPeriods: "1"
      Threshold: "75"
      AlarmActions: [!Ref ScalingPolicyAppUp]
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroupApp
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 50% for 2 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: "60"
      EvaluationPeriods: "1"
      Threshold: "50"
      AlarmActions: [!Ref ScalingPolicyAppDown]
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroupApp
      ComparisonOperator: LessThanThreshold
  InstanceEC2Bastion:
    Type: AWS::EC2::Instance
    DeletionPolicy: Delete
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX]
      InstanceType: !FindInMap [InstanceSize, !Ref Environment, EC2]
      KeyName: !Ref KeyName
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeleteOnTermination: true
          DeviceIndex: "0"
          GroupSet: 
            - !Ref SecurityGroupInstanceBastion
          SubnetId: !Ref SubnetPublicA
  NetworkAclPublic:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !ImportValue infra-vpcid
  NetworkAclPrivate:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !ImportValue infra-vpcid
  SubnetNetworkAclAssociationPublicA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPublicA
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationPrivateA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivateA
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationPrivateB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateB
      NetworkAclId: !Ref NetworkAclPrivate
  NetworkAclEntryInPublicAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: "0.0.0.0/0"
  NetworkAclEntryOutPublicAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: "0.0.0.0/0"
  NetworkAclEntryInPrivateAllowVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: "0.0.0.0/0"
  NetworkAclEntryOutPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: "0.0.0.0/0"    
  AutoSubnetCustomResource:
    Type: "Custom::LambdaAutoSubnet"
    Properties:
      ServiceToken: !ImportValue infra-autosubnetarn
      DynamoDBRegion: !Ref "AWS::Region"
      DynamoDBTable: !ImportValue infra-autosubnetddbtablename
      VPCCidr: !ImportValue infra-vpciprange
      Debug: "true"
  SubnetPublicA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !GetAtt AutoSubnetCustomResource.AppPublicCIDRA
      MapPublicIpOnLaunch: "true"
      VpcId: !ImportValue infra-vpcid
  SubnetPrivateA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !GetAtt AutoSubnetCustomResource.AppPrivateCIDRA
      MapPublicIpOnLaunch: false
      VpcId: !ImportValue infra-vpcid
  SubnetPublicB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: !GetAtt AutoSubnetCustomResource.AppPublicCIDRB
      MapPublicIpOnLaunch: "true"
      VpcId: !ImportValue infra-vpcid
  SubnetPrivateB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: !GetAtt AutoSubnetCustomResource.AppPrivateCIDRB
      MapPublicIpOnLaunch: false
      VpcId: !ImportValue infra-vpcid
  SubnetRouteTableAssociatePublicA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn: SubnetPublicA
    Properties:
      RouteTableId: !ImportValue infra-publicrt
      SubnetId: !Ref SubnetPublicA
  SubnetRouteTableAssociatePublicB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn: SubnetPublicB
    Properties:
      RouteTableId: !ImportValue infra-publicrt
      SubnetId: !Ref SubnetPublicB
  SubnetRouteTableAssociatePrivateA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn: SubnetPrivateA
    Properties:
      RouteTableId: !ImportValue infra-privaterta
      SubnetId: !Ref SubnetPrivateA
  SubnetRouteTableAssociatePrivateB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !ImportValue infra-privatertb
      SubnetId: !Ref SubnetPrivateB
Outputs:
  EndpointApp:
    Description: Application Address
    Value: !Join ["", ["http://", !GetAtt LoadBalancerApp.DNSName, "/app.php"]]
  BastionDNSAddress:
    Description: BastionHost SSH
    Value: !Join ["", [!Sub "ssh -A -i ~/.ssh/${KeyName}.pem ec2-user@", !GetAtt InstanceEC2Bastion.PublicIp]]
